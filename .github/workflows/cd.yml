name: Continuous Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  CONTAINER_NAME: web-ecs-container  # Replace with your actual container name

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    environment: dev
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:latest .
        docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }} -a
        echo "image=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  deploy-dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: build-image
    environment: dev

    steps:
    
    - name: verify
      run: |
        echo "value ${{ needs.build-image.outputs.image }}"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}  # Updated to use env
        image: ${{ needs.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true

  deploy-prod:
    name: Deploy prod
    runs-on: ubuntu-latest
    environment: prod
    needs: [build-image, deploy-dev]

    steps:
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}  # Updated to use env
        image: ${{ needs.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true
